define(["jquery", "jqueryui", "block_integrityadvocate/jquery.dataTables", "core/ajax"], (function(e, t, i, a){return{init:function(){switch (void 0 === M.block_integrityadvocate && (M.block_integrityadvocate = {}), M.block_integrityadvocate = {...M.block_integrityadvocate}, !0){case"boolean" == typeof M.block_integrityadvocate.OVERVIEW_COURSE_V2 && !0 === M.block_integrityadvocate.OVERVIEW_COURSE_V2 && e("body").hasClass("block_integrityadvocate-overview-course"):window.console.log("M.block_integrityadvocate.init.js::Found overview_course_v2", M.block_integrityadvocate.overview_course_v2), M.block_integrityadvocate.eltDt = eltDt = e("#block_integrityadvocate_overviewcourse_table").DataTable({autoWidth:!1, columnDefs:[{targets:0, name:"rownum", visible:!1}, {targets:1, name:"userid"}, {targets:2, name:"email"}, {targets:3, name:"lastcourseaccess"}, {targets:4, name:"ia-data"}, {targets:5, name:"ia-photo", searchable:!1}], language:{search:M.util.get_string("filter", "moodle") + "&nbsp;"}, order:[], ordering:!0, paging:!0, pageLength:25, lengthMenu:[10, 25, 50, 75, 100, 125, 150, 200, 250], searching:!0, processing:!0, serverSide:!0, ajax:function(t, i, o){console.log("DT: Started the DataTables ajax call with data=", t), console.log("DT: theCallbackToExec=", i), console.log("DT: settings=", o), e(t.columns).each((function(e){delete t.columns[e].search})), a.call([{methodname:"block_integrityadvocate_datatables_participants", args:{appid:M.block_integrityadvocate.appid, courseid:M.block_integrityadvocate.courseid, draw:t.draw, start:t.start, length:t.length, tblsearch:t.search.value.length?t.search.value:"", order:t.order, columns:t.columns}, done:function(t){window.console.log("M.block_integrityadvocate.datatables_participants::ajax.done; response=", t); var a = JSON.parse(t.values); a.data.forEach((t => {var i = M.util.get_string("pictureof", "moodle") + t[1].name, a = e(`<a href="${M.cfg.wwwroot}/user/view.php?id=${t[0]}&course=${M.block_integrityadvocate.courseid}"><img src="${t[1].picture}" class="userpicture defaultuserpic" width="35" height="35" alt="${i}" title="${i}" />${t[1].name}</a>`).get(0).outerHTML; t[1] = a})), i(a)}, fail:function(e, t, i){window.console.log("M.block_integrityadvocate.datatables_participants::ajax.fail", e), console.log("textStatus", t), console.log("errorThrown", i), alert(M.util.get_string("unknownerror", "moodle") + " M.block_integrityadvocate.datatables_participants::ajax.fail")}}])}}); break; case e("body").hasClass("block_integrityadvocate-overview-course"):window.console.log("M.block_integrityadvocate.init.js::overview-course: Found overview_participants_table - DataTables adds the filter capability"), e("#block_integrityadvocate_overview-course").DataTable({columnDefs:[{orderable:!1, targets:[3, 4]}], language:{search:M.util.get_string("filter", "moodle") + "&nbsp;"}, paging:!1, searching:!0}); break; case e("body").hasClass("block_integrityadvocate-overview-user") || e("body").hasClass("block_integrityadvocate-overview-module"):window.console.log("M.block_integrityadvocate.init.js::overview-user:Found overview_participant_table - DataTables is the wholeUI"), M.block_integrityadvocate.eltDt = e("#block_integrityadvocate_participant_table"), M.block_integrityadvocate.isOverviewUserPage = e("body").hasClass("block_integrityadvocate-overview-user"); class t{constructor(){this.self = this, this.fadetime = 300, this.frm = {}, this.prefix = "block_integrityadvocate_override"}preventdefault(e){return void 0 !== e && e.preventDefault(), !1}overrideuiSetup(t){window.console.log("M.block_integrityadvocate.init.js::overrideui::overrideuiSetup::Started"); var i = this; return this.frm = t.find("." + this.prefix + "_form"), this.frm.eltEdit = t.find("." + this.prefix + "_edit"), this.frm.eltStatus = this.frm.find("." + this.prefix + "_status_select"), this.frm.eltReason = this.frm.find("." + this.prefix + "_reason"), this.frm.arrUserinputs = [this.frm.eltStatus, this.frm.eltReason], this.frm.eltTargetuserid = this.frm.find("." + this.prefix + "_targetuserid"), this.frm.eltOverrideuserid = this.frm.find("." + this.prefix + "_overrideuserid"), this.frm.eltSave = this.frm.find("." + this.prefix + "_save"), this.frm.eltLoading = this.frm.find("." + this.prefix + "_loading"), this.frm.eltCancel = this.frm.find("." + this.prefix + "_cancel"), this.frm.eltReason.attr("placeholder", M.util.get_string("override_reason_label", "block_integrityadvocate")).attr("pattern", "^[a-zA-Z0-9 .,_-]{0,32}").on("keyup keypress", (function(e){var t = e.keyCode || e.which; if (window.console.log("M.block_integrityadvocate.init.js::overrideui::overrideuiSetup::Enter pressed"), 13 === t)return i.frm.eltSave.click(), e.preventDefault(), !1})), window.console.log("M.block_integrityadvocate.init.js::overrideui::overrideuiSetup::Built frm", this.frm), this.frm.eltLoading.hide(), this.saveSetStatus(!1), this.frm.trigger("reset"), this.frm.eltSave.on("click", (function(e){return window.console.log("M.block_integrityadvocate.init.js::overrideui::overrideuiSetup::eltSave.on.click()::Started"), i.validateAll() && i.saveClick(), e.preventDefault(), !1})), this.frm.eltEdit.on("click", (function(e){return i.overrideuiShow(), e.preventDefault(), !1})), this.frm.eltCancel.on("click", (function(e){return i.cancelClick(), e.preventDefault(), !1})), e(this.frm.arrUserinputs).each((function(e, t){t.on("change keyup blur", (function(e){return function(e, t, i){void 0 === window.delayed_methods && (window.delayed_methods = {}), delayed_methods[e] = Date.now(); var a = delayed_methods[e]; setTimeout((function(){delayed_methods[e] == a && (delayed_methods[e] = "", t())}), i || 500)}("validate_and_toggle_save_button", (function(){i.saveSetStatus(i.validateAll())}), 600), e.preventDefault(), !1}))})), this}cancelClick(){this.frm.trigger("reset"), this.overrideuiHide(), this.frm.closest("td").find(".oldstatusinfo, .block_integrityadvocate_overriden_icon").show(), e(".block_integrityadvocate_override_edit").show()}saveClick(){var e = this; this.inputsDisable(), window.console.log("M.block_integrityadvocate.init.js::overrideui::saveClick::Started with frm=", this.frm); var t = new URL(window.location.href); require(["core/ajax"], (function(i){i.call([{methodname:"block_integrityadvocate_set_override", args:{status:e.frm.eltStatus.val(), reason:e.frm.eltReason.val(), targetuserid:e.frm.eltTargetuserid.val(), overrideuserid:e.frm.eltOverrideuserid.val(), blockinstanceid:t.searchParams.get("instanceid"), moduleid:e.frm.parents("tr").find(".block_integrityadvocate_participant_activitymodule").attr("data-cmid")}, done:function(){window.console.log("M.block_integrityadvocate.init.js::overrideui::saveClick::ajax.done"), window.location.reload(!0)}, fail:function(e, t, i){window.console.log("M.block_integrityadvocate.init.js::overrideui::saveClick::ajax.fail"), console.log("textStatus", t), console.log("errorThrown", i), alert(M.util.get_string("unknownerror", "moodle")), window.location.reload(!0)}, always:function(){window.console.log("M.block_integrityadvocate.init.js::overrideui::saveClick::ajax.always"), e.inputsEnable(), e.cancelClick()}}])})), window.console.log("M.block_integrityadvocate.init.js::overrideui::saveClick::Done")}validateAll(){var e = this.validateReason(), t = this.validateStatus(); return e && t}validateStatus(){var e = this.frm.eltStatus, t = e.val(); return e[0].checkValidity() || 0 === t || 3 === t}validateReason(){var e = this.frm.eltReason; return window.console.log("M.block_integrityadvocate.init.js::overrideui::validateReason::Started with frm=", this.frm), window.console.log("M.block_integrityadvocate.init.js::overrideui::validateReason::Started with elt=", e), e.val(e.val().trim()), e[0].setCustomValidity(""), !!e[0].checkValidity() || (e[0].setCustomValidity(M.util.get_string("override_reason_invalid", "block_integrityadvocate")), !1)}saveSetStatus(e){e?this.saveEnable():this.saveDisable()}saveDisable(){this.frm.eltSave.css("color", "grey").on("click." + this.prefix + "_disable", this.preventdefault)}saveEnable(){this.frm.eltSave.css("color", "").off("click." + this.prefix + "_disable")}overrideuiShow(){this.frm.eltEdit.hide(), this.frm.show(), this.frm.eltSave.fadeOut(this.fadetime).fadeIn(this.fadetime), this.validateAll()}overrideuiHide(){this.frm.hide(), this.frm.eltEdit.fadeIn(this.fadetime)}inputsDisable(){this.frm.eltCancel.hide(), this.frm.eltSave.hide(), this.frm.eltLoading.show(), e(this.frm.arrUserinputs).each((function(e, t){t.attr("disabled", "disabled")}))}inputsEnable(){this.frm.eltCancel.show(), this.frm.eltSave.show(), this.frm.eltLoading.hide(), e(this.frm.arrUserinputs).each((function(e, t){t.removeAttr("disabled")}))}}M.block_integrityadvocate.eltDt.dataTable({autoWidth:!0, language:{search:M.util.get_string("filter", "moodle") + "&nbsp;"}, ordering:!0, order:[[0, "desc"], [1, "desc"]], "row-border":!0, searching:!0, scrollX:!0, paging:!0, lengthChange:!1, columnDefs:[{targets:[4], orderable:!1, searchable:!1}], initComplete:function(){window.console.log("M.block_integrityadvocate.init.js::DataTables.initComplete:fired"), M.block_integrityadvocate.eltDt = eltDt = M.block_integrityadvocate.eltDt; var i = eltDt.dataTable(); i.api().columns([6, 7, 8, 9]).visible(!1), eltDt.find(".block_integrityadvocate_participant_session_overridden").each((function(){e(this).append('<i class="fa fa-chevron-circle-down block_integrityadvocate_overriden_icon" aria-hidden="true" title="' + M.util.get_string("viewhide_overrides", "block_integrityadvocate") + '"></i>'), e(this).find("i.block_integrityadvocate_overriden_icon").click((function(){window.console.log("M.block_integrityadvocate.init.js::overridden_icon.click fired"); var t, a, o = e(this).parents("tr"), r = i.api().row(o); if (r.child.isShown())window.console.log("M.block_integrityadvocate.init.js::overridden_icon.click:This row is already open - close it"), r.child.hide(), o.removeClass("shown"), e(this).removeClass("fa-chevron-circle-up").addClass("fa-chevron-circle-down");  else{window.console.log("M.block_integrityadvocate.init.js::overridden_icon.click:Open this row"); var n = {overridetime:r.data()[6], overridestatus:r.data()[7], overrider:r.data()[8], overridereason:r.data()[9]}; r.child((t = n, a = '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;"><tr><td>Override time:</td><td>' + t.overridetime + "</td></tr><tr><td>Override original status:</td><td>" + t.overridestatus + "</td></tr><tr><td>Overrider:</td><td>" + t.overrider + "</td></tr><tr><td>Override reason:</td><td>" + t.overridereason + "</td></tr></table>", window.console.log("M.block_integrityadvocate.init.js::Built childrow=", a), a)).show(), o.addClass("shown"), e(this).removeClass("fa-chevron-circle-down").addClass("fa-chevron-circle-up")}}))})), eltDt.find(".block_integrityadvocate_participant_session_overrideui").each((function(){var i = e(this), a = i.contents().filter(((e, t) => 3 === t.nodeType)); i.prepend('<div class="oldstatusinfo">' + a.text() + "</div>"), a.remove(), i.append('<i class="fa fa-pencil-square-o block_integrityadvocate_override_edit" aria-hidden="true" title="' + M.util.get_string("override_form_label", "block_integrityadvocate") + '"></i>'); var o = new t; i.find("i.block_integrityadvocate_override_edit").click((function(){window.console.log("M.block_integrityadvocate.init.js::overrideui::add_override_click::Override button clicked"); var t = ".block_integrityadvocate_override_form"; window.console.log("M.block_integrityadvocate.init.js::overrideui::add_override_click::No existing form found"), i.find(".oldstatusinfo").hide(), i.find(t).length < 1?(window.console.log("M.block_integrityadvocate.init.js::overrideui::add_override_click::Add the editing form and init it"), i.append(e(t).first().clone()), i.find(t).show(), o.overrideuiSetup(i)):(window.console.log("M.block_integrityadvocate.init.js::overrideui::add_override_click::Existing form found - show it"), i.find(t).show()), e(".block_integrityadvocate_override_edit").hide(), i.find(".block_integrityadvocate_overriden_icon").hide(), o.overrideuiShow()}))})), eltDt.find(".block_integrityadvocate_participant_session_jquimodal").on("click.modalpic", (function(){window.console.log("M.block_integrityadvocate.init.js::jquimodal.click.modalpic fired"), e("#dialog").html('<div id="dialog" title="image"><img src="' + e(this).attr("src") + '" width="500" /></div>').dialog({modal:!0, width:"auto", open:function(){e(".ui-widget-overlay").bind("click", (function(){e("#dialog").dialog("close")}))}})}))}})}}}}));